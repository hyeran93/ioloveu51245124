
저는 6조 발표를 맡은 신혜란이라고 합니다. 저희조는 총 3명이서 프로젝트를 진행하였습니다.
프레젠테이션 목차를 먼저 설명해 드리겠습니다.
첫 번째로 프로젝트개요, 두 번째로 프로젝트를 어떻게 관리하였는지 보여드릴 거고, 세 번째는 주요기능에 대해서 설명드리고, 네 번째로는 코드 설계를 어떻게 하였는지, 그리고 주요기능 화면을 보면서 시현하도록 하겠습니다.
마지막으로 소감을 넣어봤는데, 소감은 각자 발표하도록 하겠습니다.




1. 프로젝트 개요
첫번째로 프로젝트 주제에 대해서 간단하게 말씀드리겠습니다.
파이썬 애플리케이션을 실행할 도커 이미지와 데이터를 저장할 MySQL 도커 이미지를 이용해서 CLI(Command Line Interface) 기반의 회원 서비스를 구현하는 것입니다.


2) 개발목적 
그다음 개발목적에 대해 말씀 드리겠습니다.
저희 조는 개발목적의 키워드로 '성장'을 선택했습니다. 
다음으로 말씀드리는 복습,응용,실력,커뮤니케이션 이라는
4개의 보조 항목들의 개발목적을 보시면 성장이라는 키워드를 떠올리실 수 있을 것입니다.

첫번째로

1. 쉬운 문법을 가지고 있어서 진입장벽이 낮은 객체지향 언어 파이썬, 오픈소스 기반으로 리눅스 환경에서 컨테이너 생성 및 사용을 돕는 컨테이너 기술인 도커, 이 학습 내용 복습하여, 그 토대로, 프로그램을 개발하는데 의의를 뒀습니다.


두번째로,    
2. 파이썬, 도커, 데이터베이스를 직접 다뤄볼 수 있고, 실습하면서 응용하는 능력을 기를 수 있습니다.

세번째는,
3. 그로인하여 파이썬 도커, 데이터베이스, 개발 프로세스 등에 대한 실력 향상을 기대할 수 있습니다.

마지막으로,
4. 이번 프로젝트가 팀으로 진행되는 프로젝트이다보니, 회사에서 가장 중요시여기는 협업 및 커뮤니케이션 능력의 향상도 도모할 수 있습니다.

이로써 지식의 축적뿐만 아니라, 추후 회사생활에 도움될 수 있는 커뮤니케이션 스킬까지 향상 시킴으로써, 
이번 프로젝트를 통하여 여러 방면으로 한층 더 성장해나가는 저희의 모습을 발견할 수 있을 것이라 생각했습니다.

4. 프로젝트 관리
저희조는 프로젝트를 더욱 효율적으로 진행하기 위해서, 프로젝트 시작 - 프로젝트 계획수립 - 프로젝트 가동(조직 구성 및 팀원 선발) - 프로젝트 수행 - 프로젝트 통제 - 프로젝트 종료 이 순서로 프로젝트 관리 프로세스를 구성하였습니다.


먼저, 프로젝트 계획 수립시 프로젝트는 10/11일 월요일까지 끝마치는 것으로 예상하였고, 온라인 보다는 오프라인으로 만나서 하는 것이 서로 소통할 수 있는 커뮤니케이션 측면에서도 더 낫다 판단하여 오프라인으로 진행하는 것으로 결정하였습니다.
 
두 번쨰로, 역할 분담에 대해서 말씀드리자면, 온라인으로 진행할시 대부분의 팀프로젝트는 한명이 총대를 매고, 줌으로 코드화면을 공유하면서 에러나거나 막힐 때마다 다른 조원들이 도와주는 형식으로 진행을 하는 경우가 많은데, 이런 경우 소외 되는 조원이나 프로젝트에 참여를 안하는 조원이 발생할 경우가 생깁니다. 
저희 조는 철저하게 역할분담을 하였으며, 역할은 큰틀로는 도커, 파이썬, 문서작성으로 구분지었고, 파이썬은 데이터베이스 연동과 출력부분으로 나누어서 각자 담당하는 것으로 계획을 세웠습니다.


세 번째로 저희 조는 프로젝트 수행과 통제 단계에서 문제 발생시 해결과정에 중점을 두었습니다.
문제가 발생했을 때, 어떤 로직으로 그 문제를 해결해 나갈 것인지, 해결방법은 몇가지가 있는지, 문제를 해결할 수 있는 기한은 언제쯤으로 예상되는지, 우리 선에서 해결할 수 없다 판단되면 어떤 방식으로 풀어나갈 것인지에 대한 프로세스를 미리 계획해놓았고, 프로젝트에서 이 루트대로 진행한 결과 예상보다 빠른 시일 내에 프로젝트를 끝마칠 수 있었습니다.

    
네 번째로 사용자 관점에서 바라보면, 고객은 좋은 품질의 서비스가 적시에 구현되는 것을 원하는데, 그럴려면 제품의 완성도, 제품의 질을 높여야 합니다. 
테스트 시나리오 방식을 활용하여 서비스의 품질을 검수하고, 상용화 시킬 수 있습니다. 테스트 시나리오는 테스터가 최종 사용자 관점에서 소프트웨어 애플리케이션을 테스트하는 프로세스입니다. 이 방식으로, 저희조는 구현된 기능의 흐름을 파악하기 위해, 테스트 시나리오를 작성하고, 최종 사용자 입장에서 서비스를 구현해보면서 발생할 수 있는 모든 경우의 수를 따져서 테스트 해보았으며, 결론적으로 저희가 구현하고 싶은 동작과 기능을 완벽히 수행하는 것으로 프로젝트를 잘 끝마칠 수 있었습니다.

    
3) 프로젝트 역할분담

각조원들이 역할 분담을 어떻게 하였는지에 대해서 말씀드리겠습니다.

먼저, 프로젝트 리더인 이준학님은 프로젝트 전체를 총괄해주셨고, docker file 작성, docker-compose.yml 작성, 파이썬 코딩, 도커, 그리고 프로그램을 제작하면서 발생했던 여러 오류를 잡아주셨습니다. 
파이썬 리더인 권기웅님은 파이썬 코딩 총괄을 맡았고, 코딩 오류시 빠르게 문제를 해결하였습니다. 그리고, DOCKER파일,YML파일 작성하는데 기여하고, 문서작성까지 담당하였습니다.
저는 파이썬 서브를 맡았고, 파이썬 코딩에 참여하였으며, 보이는 화면이 깔끔하게 출력될 수 있도록 코딩 수정, 에러수집을 주로 하였습니다. 그리고 PPT 제작과 발표도 담당하였습니다.
저희조는 역할분할을 합리적으로 잘 나눈 덕에 소외되는 조원이 발생하지 않았고, 팀원들의 능률이 적재적소에 쓰여서, 기한내에 프로젝트를 잘 완성시킬 수 있었습니다.




저희가 프로그램 설계를 어떻게 진행하였는지 설명해드리겠습니다.
저희 개발환경부터 말씀드리면,
운영체제는 호스트 기준으로 windows에서 진행하였으며, 터미널은 파워쉘 cmd를 사용하였고, 통합개발환경인 비쥬얼 스튜디오 코드에서 개발하였으며, 언어는파이썬, 데이터베이스는 mysql을 서버/배포 툴은 docker로 진행했습니다. 


도커 설계를 전반적으로 어떻게 진행하였는지 말씀드리겠습니다.
첫번째로, python app과 mysql database를 각각의 docker container에 실행시켜 연동해야 하기 때문에, 컨테이너의 배포, 관리, 확장을 할 수 있는 컨테이너 오케스트레이션 툴인 docker compose를 사용하였습니다.
1.	docker-compose.yml에 각 컨테이너에 대한 정의와, 환경변수등을 정의하였고 이를 통해 docker compose가 해당 컨테이너들을 띄우고 관리할 수 있게 하였습니다.
두번째로, pyapp은 dockerfile을 통해 이미지로 만들고, mysql은 기존 mysql 베이스 이미지를 사용하였습니다.
2.	Pyapp의 Dockerfile에는 파이썬app에서 mysql 실행을 위해 필요한 pymysql 모듈을 설치하고, dockerize 설치파일을 다운받도록 명시하였습니다. 또한 해당 컨테이너가 떴을때, main함수가 정의되어 있는 exercise.py라는 모듈을 호출하도록 하였습니다.
3.	Mysql 데이터베이스와, 파이썬 두 컨테이너 사이의 network는 default bridge 통신을 사용합니다. 브리지는 자동 지정되는 네트워크이고, 일반적으로 container의 application이 통신이 필요할 때 사용됩니다. 두컨테이너의 네트워킹을 확인하고자 한다면, Docker network ls 명령어로 조회가 가능합니다.

이번 프로그램 실행을 위해 도커파일과 도커 컴포즈 야물 파일을 만들었는데, 먼저, 도커 파일은 프로그램 실행용 파이썬 어플리케이션 컨테이너 구축 목적으로 작성했습니다.

도커파일을 생성하기 위한 주요 옵션들에 대해서 설명드리면,
첫번째로, From 파이썬 – 이미지 생성에 필요한 베이스가 될 이미지를 파이썬으로 적용해줬습니다. 
그다음, mysql을 파이썬에서 사용할 수 있도록 pymysql 라이브러리 pip 설치를 진행해주었습니다

도커라이즈를 다운 받아서 상대적으로 가벼운 파이썬이 먼저 실행되는 경우를 방지하고자, 도커라이즈로 파이썬 애플리케이션 실행을 20초정도 지연시켰습니다.

마지막으로, cmd는 컨테이너 시작시 실행할 명령어인데, 도커라이즈 명령어가 수행되고 난 후. Exercise 파이썬프로그램이 실행되게 합니다.

두번째로 도커 컴포즈 야물 파일은 
작성한 Dockerfile을 build 하면서 파이썬 어플리케이션 컨테이너와 MySQL 컨테이너를 동시에 서비스 하는 것을 목적으로 작성했습니다.

옵션은 파이썬, 데이터베이스 서비스를 같이 연동시켜주기 위해서 각각 정보를 입력해주었습니다.
주요옵션에 대해 말씀드리면, 빌드는 도커파일을 빌드하여 파이썬 이미지를 사용하겠다는 뜻이고,
디펜즈온 옵션은 서비스를 실행시킬 때, 종속된 서비스 디비를 먼저 실행하는 옵션입니다. 종속서비스를 db로 설정해줬기 때문에 db가 먼저 실행되고 파이썬이 그다음 순서로 실행됩니다.


이렇게 파이썬과 db를 연동시켜주기 위해 야물 파일까지 작성해주면 도커파일, 야물파일로 파이썬 어플리케이션 컨테이너가 구축되었고, 파이썬컨테이너와 데이터베이스 컨테이너를 동시에 서비스 할 수 있게됩니다.




문제점


저희가 가장 처음 대면한 문제점은 docker-compose up 명령어 실행입니다.
docker-compose up 명령어로 서비스 실행시 서비스가 생성된 결과만 출력되고
프로그램이 진행되지 않았습니다. 그래서 저희는 docker-compose.yml 파일에서
파이썬 어플리케이션 서비스에 depends_on 옵션을 사용하여 의존성을 설정하고
docker-compose run pyapp 명령어를 사용해 단독으로 서비스를 실행시키는 방법을 사용했습니다.
그 결과 단독으로 서비스를 실행하여도 의존성이 설정된 DB 서비스도 같이 실행되어 
파이썬 어플리케이션 서비스가 정상적으로 실행되고 프로그램까지 동작하는 것을 볼 수 있었습니다.

두 번째 문제점은 앞서 말씀드린 docker-compose run pyapp 명령어를 통해서 서비스를 최초로 
실행할 때 서비스가 생성되는 순서는 옳았으나 파이썬 어플리케이션에서 DB로 커넥트가 실패하는
문제였습니다. 이 문제점은 DB 서비스를 먼저 생성하였으나 서비스가 실행되는 과정에서 약간의
지연시간이 걸려서 상대적으로 가벼운 파이썬 어플리케이션이 더 빠르게 실행되면서 DB로의 
커넥트가 실패된 것이었습니다. 이에 저희는 Dockerize 라는 별도의 툴을 파이썬 어플리케이션에
Dockerfile을 통하여 빌드할때 설치하고 실행되도록 문제점을 해결했습니다. 옵션으로 타임아웃 시간을
20초로 설정하고 DB 와 커넥트가 성공할 때까지 wait 하게 하였습니다. 그 결과 약 15초 전후의
waiting 후 DB와 파이썬 어플리케이션이 정상적으로 커넥트 되는것을 볼 수 있었습니다.



그 다음 주요기능부터 이준학님이 발표하시겠습니다.














